# get user input
echo -e "\nEnter username to be created:\n"
read user


echo -e "\nEnter new password for $user:\n"
read uspw


echo -e "\nEnter new password for root:\n"
read rtpw


echo -e "\nEnter new hostname (device name):\n"
read host


echo -e "\nEnter desired timezone in format of Country/Region (Timezones can be listed by switching to a different console using Alt+F2 shorcut, logging in as root, and issuing command \"ls /usr/share/zoneinfo/*/* | less\") (Switch back to this console with Alt+F1):\n"
read tmzn


echo -e "\nEnter the name of the disk you would like to use in format of /dev/<disk_name> (Drives can be listed by switching to different console using Alt+F2 shorcut and issuing command \"fdisk -l\") (Switch back to this console with Alt+F1):\n"
read drve


echo -e "\nEnter the percentage of the drive you want to reserve for efi partition (Exclude % sign) (Arch recommends at least 260 MB):\n"
read drsz


# save these inputs in a file from which the respective fields will be sourced later
echo -e "$user $uspw $rtpw $host $tmzn $drve $drsz" > ./confidentials


echo -e "\nDone.\n\n"










# verify that the system is booted in UEFI mode withâ€¦
ls /sys/firmware/efi/efivars


# verify that the internet is working
ping -c 5 archlinux.org


# wipe drive
wipefs --all "$drve"


# format Drive
parted -s -a optimal "$drve" mklabel gpt
parted -s -a optimal "$drve" mkpart "boot" 0% "$drsz"%
parted -s -a optimal "$drve" set 1 esp on
parted -s -a optimal "$drve" mkpart "root" "$drsz"% 100%
yes | mkfs.fat -F32 "$drve"1
yes | mkfs.ext4 "$drve"2


# mount partitions
mount "$drve"2 /mnt
mkdir /mnt/boot
mount "$drve"1 /mnt/boot


# update the system clock
timedatectl set-ntp true



# update pacman repositories
pacman -Sy


# update the mirror list
reflector -c US --latest 20 --sort rate --download-timeout 120 --connection-timeout 120 --save /etc/pacman.d/mirrorlist


# install essential linux packages
pacstrap /mnt base linux linux-firmware
# if installing in a container, you can omit linux and linux-firmware
# if installing in a virtual machine, you can omit linux-firmware


# generate an fstab file
genfstab -U /mnt >> /mnt/etc/fstab










# prepeare to change root into the new system and run config script, this script will configure pacman, install all packages provided in the script, then perform all other configurations

# copy the confidentials file to destination system's root partition so that config script can access the file from inside of chroot
cp ./confidentials /mnt/root/

# copy the config script to destination system's root partition
cp ./config /mnt/root/

# change file permission of config script to make it executable
chmod a+x /mnt/root/config

# change root into the new system and run config and pkgs scripts
echo -e "\nChrooting into the new environment in 10 seconds\n"
sleep 10
arch-chroot /mnt /root/config










# remove files that are now unnecessary
rm /mnt/root/{confidentials,config}


# unmount all partitions
umount -R /mnt              # from my personal install guide
#umount -a                   # from online script

# reboot the system
echo -e "\nInstallation Complete.\n\nSystem will reboot in 10 seconds..."

sleep 10

reboot

